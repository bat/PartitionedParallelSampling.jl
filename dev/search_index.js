var documenterSearchIndex = {"docs":
[{"location":"stable_api/#API-Documentation","page":"API Documentation","title":"API Documentation","text":"","category":"section"},{"location":"stable_api/","page":"API Documentation","title":"API Documentation","text":"PartitionedParallelSampling\nPartitionedSampling","category":"page"},{"location":"stable_api/#PartitionedParallelSampling","page":"API Documentation","title":"PartitionedParallelSampling","text":"PartitionedParallelSampling\n\nParallel sampling via space partitioning (Caldwell et al.).\n\n\n\n\n\n","category":"module"},{"location":"stable_api/#PartitionedParallelSampling.PartitionedSampling","page":"API Documentation","title":"PartitionedParallelSampling.PartitionedSampling","text":"struct PartitionedSampling <: AbstractSamplingAlgorithm\n\nA sampling algorithm that partitions parameter space into multiple subspaces and samples/integrates them independently (Caldwell et al.).\n\nConstructors:\n\nPartitionedSampling(; fields...)\n\nFields:\n\ntrafo::BAT.AbstractDensityTransformTarget\nDefault: PriorToUniform()\nnpartitions::Integer\nDefault: 10\nsampler::BAT.AbstractSamplingAlgorithm\nDefault: MCMCSampling(strict = false)\nexploration_sampler::BAT.AbstractSamplingAlgorithm\nDefault: MCMCSampling(nchains = 30, nsteps = 800, strict = false)\npartitioner::SpacePartitioningAlgorithm\nDefault: KDTreePartitioning()\nintegrator::BAT.IntegrationAlgorithm\nDefault: AHMIntegration()\nnmax_resampling::AbstractFloat\nDefault: 5\n\n\n\n\n\n","category":"type"},{"location":"internal_api/#Internal-API","page":"Internal API","title":"Internal API","text":"","category":"section"},{"location":"internal_api/","page":"Internal API","title":"Internal API","text":"note: Note\nThis is the documentation of PartitionedParallelSampling's internal API, it is subject to change without deprecation.","category":"page"},{"location":"internal_api/#Types","page":"Internal API","title":"Types","text":"","category":"section"},{"location":"internal_api/","page":"Internal API","title":"Internal API","text":"Pages = [\"internal_api.md\"]\nOrder = [:type]","category":"page"},{"location":"internal_api/#Functions-and-macros","page":"Internal API","title":"Functions and macros","text":"","category":"section"},{"location":"internal_api/","page":"Internal API","title":"Internal API","text":"Pages = [\"internal_api.md\"]\nOrder = [:macro, :function]","category":"page"},{"location":"internal_api/#Documentation","page":"Internal API","title":"Documentation","text":"","category":"section"},{"location":"internal_api/","page":"Internal API","title":"Internal API","text":"PartitionedParallelSampling.KDTreePartitioning\nPartitionedParallelSampling.SpacePartTree\n\nPartitionedParallelSampling.partition_space","category":"page"},{"location":"internal_api/#PartitionedParallelSampling.KDTreePartitioning","page":"Internal API","title":"PartitionedParallelSampling.KDTreePartitioning","text":"struct KDTreePartitioning <: SpacePartitioningAlgorithm\n\nInternal, not part of stable public API.\n\nK-D binary space partitioning algorithm. By default, all parameters are considered for partitioning. Partition parameters can be specified manually by using partition_dims argument. By default, bounds of the partitioning tree are extended to those given by prior. This can be changed by setting extend_bounds = false.\n\nConstructors:\n\nKDTreePartitioning(; fields...)\n\nFields:\n\npartition_dims::Union{Symbol, Vector{Int64}}\nDefault: :auto\nextend_bounds::Bool\nDefault: true\n\n\n\n\n\n","category":"type"},{"location":"internal_api/#PartitionedParallelSampling.SpacePartTree","page":"Internal API","title":"PartitionedParallelSampling.SpacePartTree","text":"SpacePartTree\n\nInternal, not part of stable public API.\n\nThe structure stores a partitioning tree generated by any SpacePartitioningAlgorithm. Variables:\n\nterminated_leaf : true if the tree node is terminal, false otherwise.\nbounds : Low and high bound of the tree leaf.\nleft_child : The left child of the tree, missing is the node is terminal.\nright_child : The right child of the tree, missing is the node is terminal.\ncut_axis : Axis along which cut is performed, missing if the node is terminal.\ncut_coordinate : Coordinate at which a cut is performed, missing if the node is terminal.\ncost : The sum of the cost functions over leaves.\ncost_part : The cost function of the current leaf, missing if the node is terminal..\n\n\n\n\n\n","category":"type"},{"location":"internal_api/#PartitionedParallelSampling.partition_space","page":"Internal API","title":"PartitionedParallelSampling.partition_space","text":"partition_space(\n\tsamples::DensitySampleVector,\n\tnpartitions::Integer,\n\talgorithm::KDTreePartitioning\n)\n\nInternal, not part of stable public API.\n\nThe function generates a space partition tree with the number of partitions given by npartitions, using KDTreePartitioning algorithm. Exploration samples are given by samples. The output contains SpacePartTree and the values of the cost function.\n\n\n\n\n\n","category":"function"},{"location":"LICENSE/#LICENSE","page":"LICENSE","title":"LICENSE","text":"","category":"section"},{"location":"LICENSE/","page":"LICENSE","title":"LICENSE","text":"using Markdown\nMarkdown.parse_file(joinpath(@__DIR__, \"..\", \"..\", \"LICENSE.md\"))","category":"page"},{"location":"#PartitionedParallelSampling.jl","page":"Home","title":"PartitionedParallelSampling.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package provides a sampling algorithm that partitions parameter space into multiple subspaces and samples/integrates them independently (Caldwell et al.).","category":"page"},{"location":"","page":"Home","title":"Home","text":"PartitionedParallelSampling.jl is built to support the BAT.jl sampling interface, to use PartitionedParallelSampling, run","category":"page"},{"location":"","page":"Home","title":"Home","text":"using PartitionedParallelSampling, BAT\n\nbat_sample(target, PartitionedSampling())","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PartitionedParallelSampling.jl it not a registered Julia package yet and currently requires BAT.jl v3.0.0-DEV and AHMI.jl (not registered yet).","category":"page"},{"location":"","page":"Home","title":"Home","text":"To install PartitionedParallelSampling, use","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> pkg\"add BAT#main\"\njulia> pkg\"add https://github.com/bat/AHMI.jl.git\"\njulia> pkg\"add https://github.com/bat/PartitionedParallelSampling.jl.git\"","category":"page"},{"location":"#Citing-PartitionedParallelSampling","page":"Home","title":"Citing PartitionedParallelSampling","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use PartitionedParallelSampling as an important part of your work, please cite  Hafych et al. \"Parallelizing MCMC Sampling via Space Partitioning\", arXiv:2008.03098 (2020).","category":"page"},{"location":"","page":"Home","title":"Home","text":"@article{Hafych:2008.03098,\n  author        = {Hafych, Vasyl and Eller, Philipp and Caldwell, Allen and Schulz, Oliver},\n  title         = {Parallelizing MCMC Sampling via Space Partitioning},\n  year          = {2018},\n  month         = {8},\n  archiveprefix = {arXiv},\n  eprint        = {2008.03098},\n  primaryclass  = {stat.CO},\n}","category":"page"}]
}
